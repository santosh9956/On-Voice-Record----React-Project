{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["mic","window","SpeechRecognition","webkitSpeechRecognition","continuous","interimResults","lang","App","useState","isListening","setIsListening","note","setNote","saveNotes","setSaveNotes","useEffect","handleListen","start","onend","console","log","stop","onstart","onresult","event","transcript","Array","from","results","map","result","join","onerror","error","className","onClick","prevState","disabled","n","index","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iOAIMA,EAAM,IADcC,OAAOC,mBAAqBD,OAAOE,yBAG7DH,EAAII,YAAa,EACjBJ,EAAIK,gBAAiB,EACrBL,EAAIM,KAAO,QA2EIC,MAzEf,WAAgB,IAAD,EACyBC,oBAAS,GADlC,mBACNC,EADM,KACOC,EADP,OAEWF,mBAAS,IAFpB,mBAENG,EAFM,KAEAC,EAFA,OAGqBJ,mBAAS,IAH9B,mBAGNK,EAHM,KAGKC,EAHL,KAKbC,qBAAU,WACRC,MACA,CAACP,IAEH,IAAMO,EAAe,WACfP,GACFT,EAAIiB,QACJjB,EAAIkB,MAAQ,WACVC,QAAQC,IAAI,gBACZpB,EAAIiB,WAGNjB,EAAIqB,OACJrB,EAAIkB,MAAQ,WACVC,QAAQC,IAAI,iBAKhBpB,EAAIsB,QAAU,WACZH,QAAQC,IAAI,YAGdpB,EAAIuB,SAAW,SAAAC,GACb,IAAMC,EAAaC,MAAMC,KAAKH,EAAMI,SAASC,KAAI,SAAAC,GAAM,OAAIA,EAAO,MAAID,KAAI,SAAAC,GAAM,OAAIA,EAAOL,cAAYM,KAAK,IAC5GnB,EAAQa,GACRN,QAAQC,IAAIK,EAAa,sBAEzBzB,EAAIgC,QAAU,SAAAR,GACZL,QAAQC,IAAII,EAAMS,MAAQ,kBAahC,OACE,qCACE,6CACA,sBAAKC,UAAU,YAAf,UACE,sBAAKA,UAAU,MAAf,UACE,+CACA,sBAAKA,UAAU,oDAAf,UACE,oCAAOzB,EAAc,sDAAmB,mDACxC,gCACE,wBAAQ0B,QAAS,kBAAMzB,GAAe,SAAA0B,GAAS,OAAKA,MAApD,wBACA,wBAAQD,QAjBI,WACtBrB,EAAa,GAAD,mBAAKD,GAAL,CAAiBF,KAC7BC,EAAQ,KAeoCyB,UAAW1B,EAA7C,8BAGJ,4BAAIA,OAEN,sBAAKuB,UAAU,MAAf,UACE,wCACCrB,EAAUgB,KAAI,SAACS,EAAGC,GAAJ,OACb,4BAAgBD,GAARC,gBC/DLC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.5ebea96b.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\n\nconst SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\nconst mic = new SpeechRecognition();\n\nmic.continuous = true;\nmic.interimResults = true;\nmic.lang = 'en-US';\n\nfunction App() {\n  const [isListening, setIsListening] = useState(false);\n  const [note, setNote] = useState('');\n  const [saveNotes, setSaveNotes] = useState([]);\n\n  useEffect(() => {\n    handleListen();\n  },[isListening])\n\n  const handleListen = () => {\n    if (isListening) {\n      mic.start()\n      mic.onend = () => {\n        console.log('Continue....');\n        mic.start();\n      }\n    } else {\n      mic.stop()\n      mic.onend = () => {\n        console.log('Mic stop...');\n\n      }\n    }\n\n    mic.onstart = () => {\n      console.log('Mics On');\n    }\n\n    mic.onresult = event => {\n      const transcript = Array.from(event.results).map(result => result[0]).map(result => result.transcript).join('')\n      setNote(transcript);\n      console.log(transcript , 'this is transcript');\n\n      mic.onerror = event => {\n        console.log(event.error , 'event.error');\n      }\n    }\n\n  }\n\n  const handleSaveNotes = () => {\n    setSaveNotes([...saveNotes , note]);\n    setNote('');\n    // console.log('you clicked on save notes');\n    // console.log(note ,\"this is note\");\n  }\n\n  return (\n    <>\n      <h1>Voice Notes</h1>\n      <div className='container'>\n        <div className='box'>\n          <h2>Current Notes</h2>\n          <div className='d-flex justify-content-between align-items-center'>\n            <div> {isListening ? <span>üéôÔ∏è</span> : <span>üõë</span>}</div>\n            <div>\n              <button onClick={() => setIsListening(prevState => !prevState)} >Start/Stop</button>\n              <button onClick={handleSaveNotes} disabled={!note}>Save Notes</button>\n            </div>\n          </div>\n          <p>{note}</p>\n        </div>\n        <div className='box'>\n          <h2> Notes</h2>\n          {saveNotes.map((n, index) => (\n            <p key={index}>{n}</p>\n          ))}\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}